#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataStorageAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Experiments")]
	public partial class SqlStorageLinqDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDbDevice(DbDevice instance);
    partial void UpdateDbDevice(DbDevice instance);
    partial void DeleteDbDevice(DbDevice instance);
    partial void InsertDbSensor(DbSensor instance);
    partial void UpdateDbSensor(DbSensor instance);
    partial void DeleteDbSensor(DbSensor instance);
    partial void InsertDbSensorData(DbSensorData instance);
    partial void UpdateDbSensorData(DbSensorData instance);
    partial void DeleteDbSensorData(DbSensorData instance);
    #endregion
		
		public SqlStorageLinqDataClassesDataContext() : 
				base(global::DataStorageAccess.Properties.Settings.Default.ExperimentsConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SqlStorageLinqDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlStorageLinqDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlStorageLinqDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlStorageLinqDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DbDevice> DbDevice
		{
			get
			{
				return this.GetTable<DbDevice>();
			}
		}
		
		public System.Data.Linq.Table<DbSensor> DbSensor
		{
			get
			{
				return this.GetTable<DbSensor>();
			}
		}
		
		public System.Data.Linq.Table<DbSensorData> DbSensorData
		{
			get
			{
				return this.GetTable<DbSensorData>();
			}
		}
		
		public System.Data.Linq.Table<DbSensorDependency> DbSensorDependency
		{
			get
			{
				return this.GetTable<DbSensorDependency>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DbDevice")]
	public partial class DbDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Description;
		
		private string _LocationName;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private System.Nullable<decimal> _Elevation;
		
		private string _IpEndPoint;
		
		private EntitySet<DbSensor> _DbSensor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    partial void OnElevationChanging(System.Nullable<decimal> value);
    partial void OnElevationChanged();
    partial void OnIpEndPointChanging(string value);
    partial void OnIpEndPointChanged();
    #endregion
		
		public DbDevice()
		{
			this._DbSensor = new EntitySet<DbSensor>(new Action<DbSensor>(this.attach_DbSensor), new Action<DbSensor>(this.detach_DbSensor));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4096) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="VarChar(128)")]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(7,4)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(7,4)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Elevation", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpEndPoint", DbType="varchar(64) NOT NULL", CanBeNull=false)]
		public string IpEndPoint
		{
			get
			{
				return this._IpEndPoint;
			}
			set
			{
				if ((this._IpEndPoint != value))
				{
					this.OnIpEndPointChanging(value);
					this.SendPropertyChanging();
					this._IpEndPoint = value;
					this.SendPropertyChanged("IpEndPoint");
					this.OnIpEndPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbDevice_DbSensor", Storage="_DbSensor", ThisKey="Id", OtherKey="DeviceId")]
		public EntitySet<DbSensor> DbSensor
		{
			get
			{
				return this._DbSensor;
			}
			set
			{
				this._DbSensor.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbSensor(DbSensor entity)
		{
			this.SendPropertyChanging();
			entity.DbDevice = this;
		}
		
		private void detach_DbSensor(DbSensor entity)
		{
			this.SendPropertyChanging();
			entity.DbDevice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DbSensor")]
	public partial class DbSensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _DeviceId;
		
		private int _SensorId;
		
		private string _Description;
		
		private string _UnitSymbol;
		
		private int _SensorValueDataType;
		
		private int _SensorDataRetrievalMode;
		
		private bool _ShallSensorDataBePersisted;
		
		private bool _PersistDirectlyAfterChange;
		
		private bool _IsVirtualSensor;
		
		private string _SensorCategory;
		
		private int _SensorDataCalculationMode;
		
		private int _VirtualSensorDefinitionType;
		
		private string _VirtualSensorDefininition;
		
		private int _PullModeCommunicationType;
		
		private string _PullModeDotNetType;
		
		private int _PullFrequencyInSec;
		
		private string _DefaultValue;
		
		private bool _IsSynchronousPushToActuator;
		
		private bool _IsActuator;
		
		private EntitySet<DbSensorData> _DbSensorData;
		
		private EntityRef<DbDevice> _DbDevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDeviceIdChanging(string value);
    partial void OnDeviceIdChanged();
    partial void OnSensorIdChanging(int value);
    partial void OnSensorIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUnitSymbolChanging(string value);
    partial void OnUnitSymbolChanged();
    partial void OnSensorValueDataTypeChanging(int value);
    partial void OnSensorValueDataTypeChanged();
    partial void OnSensorDataRetrievalModeChanging(int value);
    partial void OnSensorDataRetrievalModeChanged();
    partial void OnShallSensorDataBePersistedChanging(bool value);
    partial void OnShallSensorDataBePersistedChanged();
    partial void OnPersistDirectlyAfterChangeChanging(bool value);
    partial void OnPersistDirectlyAfterChangeChanged();
    partial void OnIsVirtualSensorChanging(bool value);
    partial void OnIsVirtualSensorChanged();
    partial void OnSensorCategoryChanging(string value);
    partial void OnSensorCategoryChanged();
    partial void OnSensorDataCalculationModeChanging(int value);
    partial void OnSensorDataCalculationModeChanged();
    partial void OnVirtualSensorDefinitionTypeChanging(int value);
    partial void OnVirtualSensorDefinitionTypeChanged();
    partial void OnVirtualSensorDefininitionChanging(string value);
    partial void OnVirtualSensorDefininitionChanged();
    partial void OnPullModeCommunicationTypeChanging(int value);
    partial void OnPullModeCommunicationTypeChanged();
    partial void OnPullModeDotNetTypeChanging(string value);
    partial void OnPullModeDotNetTypeChanged();
    partial void OnPullFrequencyInSecChanging(int value);
    partial void OnPullFrequencyInSecChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnIsSynchronousPushToActuatorChanging(bool value);
    partial void OnIsSynchronousPushToActuatorChanged();
    partial void OnIsActuatorChanging(bool value);
    partial void OnIsActuatorChanged();
    #endregion
		
		public DbSensor()
		{
			this._DbSensorData = new EntitySet<DbSensorData>(new Action<DbSensorData>(this.attach_DbSensorData), new Action<DbSensorData>(this.detach_DbSensorData));
			this._DbDevice = default(EntityRef<DbDevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceId", DbType="VarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					if (this._DbDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4096) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitSymbol", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UnitSymbol
		{
			get
			{
				return this._UnitSymbol;
			}
			set
			{
				if ((this._UnitSymbol != value))
				{
					this.OnUnitSymbolChanging(value);
					this.SendPropertyChanging();
					this._UnitSymbol = value;
					this.SendPropertyChanged("UnitSymbol");
					this.OnUnitSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorValueDataType", DbType="Int NOT NULL")]
		public int SensorValueDataType
		{
			get
			{
				return this._SensorValueDataType;
			}
			set
			{
				if ((this._SensorValueDataType != value))
				{
					this.OnSensorValueDataTypeChanging(value);
					this.SendPropertyChanging();
					this._SensorValueDataType = value;
					this.SendPropertyChanged("SensorValueDataType");
					this.OnSensorValueDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorDataRetrievalMode", DbType="Int NOT NULL")]
		public int SensorDataRetrievalMode
		{
			get
			{
				return this._SensorDataRetrievalMode;
			}
			set
			{
				if ((this._SensorDataRetrievalMode != value))
				{
					this.OnSensorDataRetrievalModeChanging(value);
					this.SendPropertyChanging();
					this._SensorDataRetrievalMode = value;
					this.SendPropertyChanged("SensorDataRetrievalMode");
					this.OnSensorDataRetrievalModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShallSensorDataBePersisted", DbType="Bit NOT NULL")]
		public bool ShallSensorDataBePersisted
		{
			get
			{
				return this._ShallSensorDataBePersisted;
			}
			set
			{
				if ((this._ShallSensorDataBePersisted != value))
				{
					this.OnShallSensorDataBePersistedChanging(value);
					this.SendPropertyChanging();
					this._ShallSensorDataBePersisted = value;
					this.SendPropertyChanged("ShallSensorDataBePersisted");
					this.OnShallSensorDataBePersistedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersistDirectlyAfterChange", DbType="Bit NOT NULL")]
		public bool PersistDirectlyAfterChange
		{
			get
			{
				return this._PersistDirectlyAfterChange;
			}
			set
			{
				if ((this._PersistDirectlyAfterChange != value))
				{
					this.OnPersistDirectlyAfterChangeChanging(value);
					this.SendPropertyChanging();
					this._PersistDirectlyAfterChange = value;
					this.SendPropertyChanged("PersistDirectlyAfterChange");
					this.OnPersistDirectlyAfterChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVirtualSensor", DbType="Bit NOT NULL")]
		public bool IsVirtualSensor
		{
			get
			{
				return this._IsVirtualSensor;
			}
			set
			{
				if ((this._IsVirtualSensor != value))
				{
					this.OnIsVirtualSensorChanging(value);
					this.SendPropertyChanging();
					this._IsVirtualSensor = value;
					this.SendPropertyChanged("IsVirtualSensor");
					this.OnIsVirtualSensorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorCategory", DbType="VarChar(128)")]
		public string SensorCategory
		{
			get
			{
				return this._SensorCategory;
			}
			set
			{
				if ((this._SensorCategory != value))
				{
					this.OnSensorCategoryChanging(value);
					this.SendPropertyChanging();
					this._SensorCategory = value;
					this.SendPropertyChanged("SensorCategory");
					this.OnSensorCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorDataCalculationMode", DbType="Int NOT NULL")]
		public int SensorDataCalculationMode
		{
			get
			{
				return this._SensorDataCalculationMode;
			}
			set
			{
				if ((this._SensorDataCalculationMode != value))
				{
					this.OnSensorDataCalculationModeChanging(value);
					this.SendPropertyChanging();
					this._SensorDataCalculationMode = value;
					this.SendPropertyChanged("SensorDataCalculationMode");
					this.OnSensorDataCalculationModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualSensorDefinitionType", DbType="Int NOT NULL")]
		public int VirtualSensorDefinitionType
		{
			get
			{
				return this._VirtualSensorDefinitionType;
			}
			set
			{
				if ((this._VirtualSensorDefinitionType != value))
				{
					this.OnVirtualSensorDefinitionTypeChanging(value);
					this.SendPropertyChanging();
					this._VirtualSensorDefinitionType = value;
					this.SendPropertyChanged("VirtualSensorDefinitionType");
					this.OnVirtualSensorDefinitionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualSensorDefininition", DbType="VarChar(MAX)")]
		public string VirtualSensorDefininition
		{
			get
			{
				return this._VirtualSensorDefininition;
			}
			set
			{
				if ((this._VirtualSensorDefininition != value))
				{
					this.OnVirtualSensorDefininitionChanging(value);
					this.SendPropertyChanging();
					this._VirtualSensorDefininition = value;
					this.SendPropertyChanged("VirtualSensorDefininition");
					this.OnVirtualSensorDefininitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PullModeCommunicationType", DbType="Int NOT NULL")]
		public int PullModeCommunicationType
		{
			get
			{
				return this._PullModeCommunicationType;
			}
			set
			{
				if ((this._PullModeCommunicationType != value))
				{
					this.OnPullModeCommunicationTypeChanging(value);
					this.SendPropertyChanging();
					this._PullModeCommunicationType = value;
					this.SendPropertyChanged("PullModeCommunicationType");
					this.OnPullModeCommunicationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PullModeDotNetType", DbType="VarChar(256)")]
		public string PullModeDotNetType
		{
			get
			{
				return this._PullModeDotNetType;
			}
			set
			{
				if ((this._PullModeDotNetType != value))
				{
					this.OnPullModeDotNetTypeChanging(value);
					this.SendPropertyChanging();
					this._PullModeDotNetType = value;
					this.SendPropertyChanged("PullModeDotNetType");
					this.OnPullModeDotNetTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PullFrequencyInSec", DbType="Int NOT NULL")]
		public int PullFrequencyInSec
		{
			get
			{
				return this._PullFrequencyInSec;
			}
			set
			{
				if ((this._PullFrequencyInSec != value))
				{
					this.OnPullFrequencyInSecChanging(value);
					this.SendPropertyChanging();
					this._PullFrequencyInSec = value;
					this.SendPropertyChanged("PullFrequencyInSec");
					this.OnPullFrequencyInSecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX) NULL", CanBeNull=false)]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSynchronousPushToActuator", DbType="bit NOT NULL")]
		public bool IsSynchronousPushToActuator
		{
			get
			{
				return this._IsSynchronousPushToActuator;
			}
			set
			{
				if ((this._IsSynchronousPushToActuator != value))
				{
					this.OnIsSynchronousPushToActuatorChanging(value);
					this.SendPropertyChanging();
					this._IsSynchronousPushToActuator = value;
					this.SendPropertyChanged("IsSynchronousPushToActuator");
					this.OnIsSynchronousPushToActuatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActuator", DbType="bit NOT NULL")]
		public bool IsActuator
		{
			get
			{
				return this._IsActuator;
			}
			set
			{
				if ((this._IsActuator != value))
				{
					this.OnIsActuatorChanging(value);
					this.SendPropertyChanging();
					this._IsActuator = value;
					this.SendPropertyChanged("IsActuator");
					this.OnIsActuatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbSensor_DbSensorData", Storage="_DbSensorData", ThisKey="SensorId", OtherKey="SensorId")]
		public EntitySet<DbSensorData> DbSensorData
		{
			get
			{
				return this._DbSensorData;
			}
			set
			{
				this._DbSensorData.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbDevice_DbSensor", Storage="_DbDevice", ThisKey="DeviceId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DbDevice DbDevice
		{
			get
			{
				return this._DbDevice.Entity;
			}
			set
			{
				DbDevice previousValue = this._DbDevice.Entity;
				if (((previousValue != value) 
							|| (this._DbDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbDevice.Entity = null;
						previousValue.DbSensor.Remove(this);
					}
					this._DbDevice.Entity = value;
					if ((value != null))
					{
						value.DbSensor.Add(this);
						this._DeviceId = value.Id;
					}
					else
					{
						this._DeviceId = default(string);
					}
					this.SendPropertyChanged("DbDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbSensorData(DbSensorData entity)
		{
			this.SendPropertyChanging();
			entity.DbSensor = this;
		}
		
		private void detach_DbSensorData(DbSensorData entity)
		{
			this.SendPropertyChanging();
			entity.DbSensor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DbSensorData")]
	public partial class DbSensorData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Identity;
		
		private int _SensorId;
		
		private System.DateTime _TakenWhen;
		
		private string _Value;
		
		private string _CorrelationId;
		
		private EntityRef<DbSensor> _DbSensor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdentityChanging(int value);
    partial void OnIdentityChanged();
    partial void OnSensorIdChanging(int value);
    partial void OnSensorIdChanged();
    partial void OnTakenWhenChanging(System.DateTime value);
    partial void OnTakenWhenChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCorrelationIdChanging(string value);
    partial void OnCorrelationIdChanged();
    #endregion
		
		public DbSensorData()
		{
			this._DbSensor = default(EntityRef<DbSensor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Identity]", Storage="_Identity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Identity
		{
			get
			{
				return this._Identity;
			}
			set
			{
				if ((this._Identity != value))
				{
					this.OnIdentityChanging(value);
					this.SendPropertyChanging();
					this._Identity = value;
					this.SendPropertyChanged("Identity");
					this.OnIdentityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Int NOT NULL")]
		public int SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._DbSensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakenWhen", DbType="DateTime NOT NULL")]
		public System.DateTime TakenWhen
		{
			get
			{
				return this._TakenWhen;
			}
			set
			{
				if ((this._TakenWhen != value))
				{
					this.OnTakenWhenChanging(value);
					this.SendPropertyChanging();
					this._TakenWhen = value;
					this.SendPropertyChanged("TakenWhen");
					this.OnTakenWhenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrelationId", DbType="varchar(MAX) NULL")]
		public string CorrelationId
		{
			get
			{
				return this._CorrelationId;
			}
			set
			{
				if ((this._CorrelationId != value))
				{
					this.OnCorrelationIdChanging(value);
					this.SendPropertyChanging();
					this._CorrelationId = value;
					this.SendPropertyChanged("CorrelationId");
					this.OnCorrelationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbSensor_DbSensorData", Storage="_DbSensor", ThisKey="SensorId", OtherKey="SensorId", IsForeignKey=true)]
		public DbSensor DbSensor
		{
			get
			{
				return this._DbSensor.Entity;
			}
			set
			{
				DbSensor previousValue = this._DbSensor.Entity;
				if (((previousValue != value) 
							|| (this._DbSensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbSensor.Entity = null;
						previousValue.DbSensorData.Remove(this);
					}
					this._DbSensor.Entity = value;
					if ((value != null))
					{
						value.DbSensorData.Add(this);
						this._SensorId = value.SensorId;
					}
					else
					{
						this._SensorId = default(int);
					}
					this.SendPropertyChanged("DbSensor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DbSensorDependency")]
	public partial class DbSensorDependency
	{
		
		private int _BaseSensorId;
		
		private int _DependentSensorId;
		
		public DbSensorDependency()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseSensorId", DbType="Int NOT NULL")]
		public int BaseSensorId
		{
			get
			{
				return this._BaseSensorId;
			}
			set
			{
				if ((this._BaseSensorId != value))
				{
					this._BaseSensorId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependentSensorId", DbType="Int NOT NULL")]
		public int DependentSensorId
		{
			get
			{
				return this._DependentSensorId;
			}
			set
			{
				if ((this._DependentSensorId != value))
				{
					this._DependentSensorId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
